generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  fullName           String
  email              String        @unique
  password           String        @db.VarChar(255)
  phoneNumber        String
  created_at         DateTime      @default(now())
  role               String        @default("client")
  updated_at         DateTime      @updatedAt
  isVerified         Boolean       @default(false)
  stripeCustomerId   String?       @unique
  clientAppointments Appointment[] @relation("ClientAppointments")
  lawyerAppointments Appointment[] @relation("LawyerAppointments")
  blogs              Blog[]
  clientProfile      Client?       @relation("UserClientProfile")
  lawyerProfile      Lawyer?       @relation("UserLawyerProfile")
  messagesReceived   Message[]     @relation("UserMessagesReceived")
  messagesSent       Message[]     @relation("UserMessagesSent")
  payments           Payment[]     @relation("UserPayments")
}

model Appointment {
  id        Int      @id @default(autoincrement())
  clientId  Int
  lawyerId  Int
  date      DateTime
  status    String   @default("scheduled")
  createdAt DateTime @default(now())
  client    User     @relation("ClientAppointments", fields: [clientId], references: [id])
  lawyer    User     @relation("LawyerAppointments", fields: [lawyerId], references: [id])

  @@index([clientId], map: "Appointment_clientId_fkey")
  @@index([lawyerId], map: "Appointment_lawyerId_fkey")
}

model Lawyer {
  id             Int            @id @default(autoincrement())
  userId         Int            @unique
  professionalId String         @unique
  licenseNumber  String         @unique
  organization   String?
  specialty      String?
  bio            String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  fullName       String
  password       String         @db.VarChar(255)
  Availability   Availability[]
  cases          Case[]         @relation("LawyerCases")
  user           User           @relation("UserLawyerProfile", fields: [userId], references: [id])
}

model Client {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  address String?
  cases   Case[]  @relation("ClientCases")
  user    User    @relation("UserClientProfile", fields: [userId], references: [id])
}

model Case {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  status         String   @default("open")
  clientId       Int
  lawyerId       Int?
  issueType      String
  address        String
  city           String
  zipCode        String
  country        String
  additionalInfo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  client         Client   @relation("ClientCases", fields: [clientId], references: [id], map: "ClientCaseRelation")
  lawyer         Lawyer?  @relation("LawyerCases", fields: [lawyerId], references: [id], map: "LawyerCaseRelation")

  @@index([clientId], map: "ClientCaseRelation")
  @@index([lawyerId], map: "LawyerCaseRelation")
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int
  role          String   @default("client")
  amount        Float
  status        String   @default("completed")
  transactionId String   @unique
  createdAt     DateTime @default(now())
  user          User     @relation("UserPayments", fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("UserMessagesReceived", fields: [receiverId], references: [id])
  sender     User     @relation("UserMessagesSent", fields: [senderId], references: [id])

  @@index([receiverId], map: "Message_receiverId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Blog_authorId_fkey")
}

model Availability {
  id            Int      @id @default(autoincrement())
  lawyerId      Int
  startTime     DateTime
  endTime       DateTime
  isRecurring   Boolean  @default(false)
  recurringDays String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Lawyer        Lawyer   @relation(fields: [lawyerId], references: [id])

  @@index([lawyerId], map: "Availability_lawyerId_fkey")
}
